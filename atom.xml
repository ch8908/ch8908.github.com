<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thousand Squared]]></title>
  <link href="http://ch8908.github.com/atom.xml" rel="self"/>
  <link href="http://ch8908.github.com/"/>
  <updated>2013-01-29T09:31:49-08:00</updated>
  <id>http://ch8908.github.com/</id>
  <author>
    <name><![CDATA[黃千千]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PasscodeLock]]></title>
    <link href="http://ch8908.github.com/blog/2013/01/27/passcodelock/"/>
    <updated>2013-01-27T20:00:00-08:00</updated>
    <id>http://ch8908.github.com/blog/2013/01/27/passcodelock</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://modmyi.com/attachments/forums/iphone-2g-3g-3gs-ipod-touch-1g-2g-3g-new-skins-themes-launches/420999d1264371765-release-rainbow-lockscreen-passcode-lock-lockbackground12.jpg"></p>

<p>前陣子實作了 PasscodeLock ，感覺還蠻有趣的，跟大家分享如何實作。</p>

<p>一個好的 PasscodeLock 要能夠蓋住全部的UI，像是 UIAlertView, UIActionSheet，或者是 UIImagePickerController</p>

<p>但利用一般的 UIViewController 是做不到的，因為 UIAlertView 的顯示層級最高。因此要利用另外一種方法來實作PasscodeLock─<strong>UIWindow</strong></p>

<!-- more -->


<h2>實作UIWindow</h2>

<p><a href="https://github.com/ch8908/Thousnad2/tree/master/PasscodeLock" title="Optional Title">View source on Github</a></p>

<p>PasscodeLock的關鍵就是：要建立另一個UIWindow。</p>

<p>為什麼呢？</p>

<p>因為 UIAlertView、UIActionSheet 等這些 View 其實都會建立自己的 UIWindow，也因為這樣，這些 UIAlertView 才可以顯示在最上層。
所以當你看到 UIAlertView 時，它跟原本的 app 畫面已經在不同層次(也就是不同 UIWindow)了。所以無論你在原本的 viewController 怎麼寫，都沒有辦法覆蓋在 UIAlertView 上。</p>

<p>要覆蓋住 UIAlertView，只能夠建立一個 Level 比他高的 UIWindow。<br/>
以下是建立的程式碼：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="p">[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">].</span><span class="n">bounds</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set window level</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">windowLevel</span> <span class="o">=</span> <span class="n">UIWindowLevelAlert</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">passcodeLockViewController</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重點在設定 window level</p>

<p>把這些值印出來就可以知道，UIWindowLevelAlert 是最大的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2013-01-27 22:41:04.744 PasscodeLock[28036:c07] >>>>>>>>>>UIWindowLevelAlert 2000.000000
</span><span class='line'>2013-01-27 22:41:04.745 PasscodeLock[28036:c07] >>>>>>>>>>UIWindowLevelStatusBar 1000.000000
</span><span class='line'>2013-01-27 22:41:04.745 PasscodeLock[28036:c07] >>>>>>>>>>UIWindowLevelNormal 0.000000</span></code></pre></td></tr></table></div></figure>


<p>因此我們只要設定一個比 UIWindowLevelAlert 大的值就可以了，但有沒有副作用我就不知道了XD</p>

<p>另外就是顯示的時候啦，有兩個部分：</p>

<p>第一個部分是在：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">applicationDidEnterBackground:</span><span class="p">(</span><span class="n">UIApplication</span><span class="o">*</span><span class="p">)</span> <span class="n">application</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">passcodeLockWindow</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>為什麼要寫在這裡？因為當一進入背景的時候，就要先建立好 PasscodeLock，根據
<a href="http://developer.apple.com/library/ios/#DOCUMENTATION/iPhone/Conceptual/iPhoneOSProgrammingGuide/ManagingYourApplicationsFlow/ManagingYourApplicationsFlow.html" title="Optional Title">Document</a>
 表示</p>

<blockquote><p>When an app transitions to the background, the system takes a snapshot of the app’s main window, which it then presents briefly when transitioning your app back to the foreground.</p></blockquote>

<p>上面說的是 App 進入背景時，系統會先截圖。等到 app 再次開啟時，就可以秀出這張截圖作為Loading時使用。</p>

<p>為了避免看到未上鎖的畫面，在 app 進入背景時就先建立好 PasscodeLock 並顯示，等到下次開啟 app 時，就可以直接看到 PasscodeLock 的畫面。</p>

<p>第二個部分在：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span><span class="o">*</span><span class="p">)</span> <span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span><span class="o">*</span><span class="p">)</span> <span class="n">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">passcodeLockWindow</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>初次開啟 app 時，就要啟動 PasscodeLock。</p>

<p>有了這兩個地方就可以控制 PasscodeLock 的出現與消失。</p>

<h2>實作Keyboard</h2>

<p>另一個部分就是實作 Keyboard ，為什麼要自己實作 Keyboard？</p>

<p>因為有特例要處理，假設情境如下：</p>

<blockquote><p>當你開啟密碼鎖並且在更改密碼時，突然有人打電話近來。<br/>
等你講完電話後，開啟app，此時要輸入密碼解鎖，輸入完後會跳到更改密碼的畫面。</p></blockquote>

<p>如果此時都是用原生的 Keyboard，在 iOS4 與 iOS5+ 會有不一樣的情況發生，因為 Keyboard 要在不同 UIWindow 出現。而原生的 Keyboard 是 Singlton的東西，處理起來會有一些問題。<br/>
因此在整體效率及維護的考量之下，使用假鍵盤是最佳解(我自己覺得XD)！</p>

<h2>How to use this project</h2>

<h4>1. 建立PasscodeLock畫面</h4>

<p>因此當你需要設定密碼、更改密碼、驗證密碼時需要繼承：</p>

<p><strong>AbstractPasscodeLockViewController</strong>，其中有1個重要的 method 需要實作</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">onFilled:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>當填滿密碼時，就會呼叫此 method，需要在此 method 判斷密碼是否正確。</p>

<h4>2. 呼叫 PasscodeLock Window</h4>

<p>class <strong>PasscodeLockWindow</strong> 用來建立、顯示與隱藏 PasscodeLock window。</p>

<p>要建立此 instance 來操作 PasscodeLock。</p>

<h2>小結</h2>

<p>這是最基本的PasscodeLock，還可以加上動畫、特效讓他看起來更炫。</p>

<p>那如果忘記密碼呢？</p>

<p>很抱歉，只能重新安裝App啦XDD，不然你也可以寫一個暗鎖解開他(譬如案10次0)。</p>

<p><a href="https://github.com/ch8908/Thousnad2/tree/master/PasscodeLock" title="Optional Title">View source on Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS新手上路]]></title>
    <link href="http://ch8908.github.com/blog/2012/12/25/iosxin-shou-shang-lu/"/>
    <updated>2012-12-25T09:21:00-08:00</updated>
    <id>http://ch8908.github.com/blog/2012/12/25/iosxin-shou-shang-lu</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://site-macgasm.s3.amazonaws.com/wp-content/uploads/2012/03/ios-developer-deal.jpg"></p>

<p>從開始學習開發 iOS App 到現在差不多半年，發現 Cocoa Touch 及 Objective-C 真是一個有趣的組合，很多很酷的觀念可以學習。
跟大家來分享一些學習的參考資料及心得囉！</p>

<!-- more -->


<h2>開發環境</h2>

<p>首先，要開發iOS App，只能用 Mac OS，不像 Android 可以在 Win、Linux、Mac 上開發。如果沒有mac電腦，可以利用 <a href="http://www.souldevteam.net/blog/downloads/" title="Optional Title">Virtual Machine</a> 練習一下</p>

<p>開發用的IDE就使用XCode，因為許多官方的例子都是在XCode上作解說。等到之後熟悉了，可以改用AppCode，加速開發。</p>

<p>最後真的下定決心了，就準備買一台MacBook吧。</p>

<p>我買了Macbook Pro 13，因為常常要帶來帶去。另外我習慣用Programming的方法拉介面，因此不會有螢幕太小的問題XD</p>

<h2>第一隻 iOS App</h2>

<p>環境都架設好之後，就準備開始寫程式吧！</p>

<p>我第一隻iOS的程式是從官方網站的練習題 - <a href="https://developer.apple.com/library/ios/#referencelibrary/GettingStarted/RoadMapiOS/chapters/JumpRightIn.html" title="Optional Title">Your First iOS App</a><br/>
除此之外還有 <a href="https://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/SecondiOSAppTutorial/Introduction/Introduction.html" title="Optional Title">Your Second iOS App</a>
跟 <a href="https://developer.apple.com/library/ios/#documentation/General/Conceptual/iCloud101/Introduction/Introduction.html" title="Optional Title">Your Third iOS App</a>
，全部練習完後會信心大增XDD。</p>

<p>Apple的教學超用心的，教你XCode的開發環境，MVC的架構等等。每個步驟都有詳細解說，因此利用官方的範例當做第一隻App是最適合啦。</p>

<h2>網路教學</h2>

<p>網路上最有名的iOS教學就是 <a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/downloads-2011-fall" title="Optional Title">Stanford CS193P</a>
 史丹佛的iOS開放式教學課程，在iTunes上都可以免費下載。</p>

<p>除了有課程講義外，還有課程影片可以看唷，當然全都是英文的，不過iTunes可以開英文字幕。就不用擔心聽不懂啦。</p>

<p>Standord的白鬍子長得帥教的棒，實際的影片操作能快速熟悉XCode的開發環境，StoryBoard使用，並了解iOS開發流程。真的是很好的教學資源呀！</p>

<h2>教學書籍</h2>

<p>除了看影片之外，書是一定要有的，訪間許多iOS開發的中文書籍，其實都大同小異。但有一天我在網路上看到人家推薦一本iOS開發的書籍：</p>

<p><a href="http://www.books.com.tw/exep/prod/booksfile.php?item=F012646361" title="Optional Title">The Big Nerd Ranch Guide (3rd Edition)</a></p>

<p>大吃一斤!!!</p>

<p>這本書真是很適合初學者呀，內容圖文並茂，除了介紹怎麼開發之外，也介紹許多 Objective-C 與 Cocoa Touch 的特性，很多不知所以然的問題都有了答案，值得推薦給任何想學iOS的開發者們。</p>

<h2>相關網站</h2>

<p><a href="http://www.cocoacontrols.com/controls" title="Optional Title">Cocoa Controls</a>&#8211;
有很多UI範例可以參考，再難的UI也做的出來！</p>

<p><a href="http://mobile.tutsplus.com/" title="Optional Title">Mobile tuts</a>&#8211;
不定期會有 iOS 開發教學，有進階也有初階，有空可以逛逛挖寶。</p>

<p><a href="http://furnacedigital.blogspot.tw/" title="Optional Title">Furnace Digital</a>&#8211;
少數會看的中文教學網站，內容很多還不錯。</p>

<h2>學習心得</h2>

<p>Objective-C 與 Cocoa Touch 其實不好上手，因為他們與一般的習慣的程式語言有點不同。所以剛開始學習進度緩慢，常常在實作時，都照著範例打，卻不知道再幹嘛。</p>

<p>這點是正常的，請不用擔心，只要多練習，仔細看書本教學，自然就會開竅啦！遇到不熟的 API 怎麼辦？就直接到 stackoverflow 找吧，別浪費時間慢慢想，有時候只是因為你不知道這個 API 可以這樣用(因為 Cocoa Touch 本身就很特別)。</p>

<h2>小結</h2>

<p>因為行動裝置 App 的出現，讓工程師們多了一種管道可以改變世界。如果對開發實用的軟體有興趣，又喜歡iPhone、iPad，不妨考慮來學習開發iOS App吧！</p>

<p>ps:Objective-C 已經變成全世界最多人使用的程式語言囉</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming心得]]></title>
    <link href="http://ch8908.github.com/blog/2012/11/18/pair-programmingxin-de/"/>
    <updated>2012-11-18T21:43:00-08:00</updated>
    <id>http://ch8908.github.com/blog/2012/11/18/pair-programmingxin-de</id>
    <content type="html"><![CDATA[<p>在上個禮拜之前，寫程式對我來說，大部分都是一個人單打獨鬥的事情。</p>

<p>學校作業、碩士論文，一人一份，時間到了記得交出來。<br/>
工作時期，接案Case，一人一份，老闆覺得兩個人接同一個案子太浪費成本了！</p>

<p>以上的種種，讓寫程式都大部分為一個人做的事情，頂多就是問問資深人員一些架構問題等等&#8230;</p>

<p>最近到了新環境，採用了Pair Programming，真是令我既期待又怕受傷害阿阿阿阿～</p>

<!-- more -->


<h2>什麼是Pair Programming?</h2>

<p>Pair Programming來自Extreme Programming，它是Extreme Programming裡的其中一項作業。
(<a href="http://en.wikipedia.org/wiki/Extreme_programming" title="Optional Title">Extreme Programming</a>是一種軟體開發模式，我也才剛接觸所以不太熟)</p>

<p>簡單來說，就是兩個人坐在一起，配備<br/>
<strong>- 兩個螢幕</strong><br/>
<strong>- 兩個鍵盤</strong><br/>
<strong>- 兩個滑鼠</strong><br/>
<strong>- 一台主機</strong></p>

<p>沒錯！一台主機，就是兩個人coding同一份程式碼！</p>

<p>雖然以前有聽說過這種開發方式，但也只是聽說&#8230;</p>

<p>第一次參與Pair時，就是一直看一直看，一直看Senior以飛快的速度寫程式&#8230;.<br/>
然後換我寫時，慢的跟新手一樣，還常常打錯字，鍵盤都握不好啦&#8230;0rz</p>

<p>沒想到在coding時，旁邊有人監督竟然這麼有壓力，怕變數名稱取的不好，怕打字速度太慢，怕誤會剛剛的演算法。讓我一開始pair時coding速度變很慢&#8230;。</p>

<h2>Pair的好處</h2>

<h4>1. 品質</h4>

<p>程式的品質真的好很多。</p>

<p>從最基本的變數名稱，邏輯判斷，演算法等等。一人寫程式，一人監督的概念，讓程式不會亂寫。</p>

<p>該抽出來的function就抽，該定義constant就定義，該寫的註解不會漏掉，不會有多餘的if else，可讀性提高許多，而且Bug真的變少了！
(很明顯感受到程式Compile執行後就正確無誤，真是太神奇啦！)</p>

<h4>2. 專心</h4>

<p>Pair互相監督討論，根本無法打混(除非兩個人一起打混&#8230;XD)。<br/>
這陣子下來發現，Pair時會超級認真的，討論很起勁還會忘記吃飯！<br/>
(因此Pair完也會有用腦過度的感覺&#8230;)</p>

<h4>3. 維護</h4>

<p>Pair雙方都對程式架構有相當程度的了解，因此不用擔心交接問題。<br/>
這對小公司來說應該算是最實用的地方了，不會產生爛攤子而沒人收拾。</p>

<p>對我而言，從pair上可以更快了解此專案內容。透過不斷的思考、討論、問與答，比起一個人慢慢的看code，效率要好上十幾倍呀！
而經由senior的在旁指導，讓我學習到更多軟體開發的技巧，也少走很多的冤枉路，真是太值得了。</p>

<h2>Pair的困擾</h2>

<p>Pair時也有幾個會困擾開發者的事情：</p>

<h4>1. IDE的選擇</h4>

<p>有人習慣用XCode，有人習慣用Eclips、Notepad++等，這些IDE的熱鍵有時都不同，當兩個人湊在一起時，就必須向某一方妥協，總不可能一直切換IDE寫吧。
為了有共識，我們公司統一Pair開發用IDE，也統一了熱鍵，方便開發。</p>

<h4>2. 查資料時效率不好</h4>

<p>寫到一半卡住，要google時，會發現兩人用一台電腦真是不好查資料&#8230;因為每個人的閱讀習慣不同，
因此常常會一個人在查，另一個人就在發呆&#8230;。為了克服這個問題，我們還是會另外放一台筆電在旁邊，做為查資料時使用。</p>

<h4>3. 作息要一致</h4>

<p>若Pair的作息不同，Pair的時間就會變少了，我想這也是Pair的宿命吧。</p>

<h4>4. 學習時間變少</h4>

<p>我們公司是full time pair，這有一個意想不到的缺點，就是沒有自己的時間呀。<br/>
上班就是pair到下班，想要學新技術，就必須自己找時間學習。
不知不覺壓力就變大了哈哈哈<br/>
(不過這或許是好事吧XD)</p>

<h2>總結</h2>

<p>我覺得pair programming真的還蠻適合用在規模不大專案的開發上。
不僅程式品質變好，開發速度其實也是變快的(Debug時間大大變少&#8230;XD)。</p>

<p>可惜pair programming在台灣老闆耳中聽起來就很像是一種增加成本的開發方式&#8230;0rz。</p>

<p>如果有時間的話，就來試試Pair Programming吧。</p>

<h2>參考資料：</h2>

<ol>
<li><a href="http://en.wikipedia.org/wiki/Pair_programming" title="Optional Title">Pair Programming</a> - <em>Wiki Pair Programming</em>.</li>
<li><a href="http://en.wikipedia.org/wiki/Extreme_programming" title="Optional Title">Extreme Programming</a> - <em>Wiki Extreme Programming</em>.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress在mac上遇到的問題]]></title>
    <link href="http://ch8908.github.com/blog/2012/11/06/octopresszai-macshang-hui-yu-dao-de-wen-ti/"/>
    <updated>2012-11-06T23:26:00-08:00</updated>
    <id>http://ch8908.github.com/blog/2012/11/06/octopresszai-macshang-hui-yu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<h2>What is Octopress</h2>

<p>目前我的Blog使用Octopress這套Framework。(多謝<a href="http://blog.roachking.net/" title="Optional Title">林小強</a>的推薦)<br/>
果然蠻好用的，就如官方文件所說:</p>

<blockquote><p>A blogging framework for hackers.</p></blockquote>

<p>駭客級的Blog工具呀～</p>

<!-- more -->


<p>最棒的是，octopress所產生的畫面好好看呀！在mobile上也幫你做了最佳化，用手機開blog也漂漂亮亮的，awesome!</p>

<p>詳細的安裝說明參考Octopress <a href="http://octopress.org/docs/" title="Optional Title">docs</a></p>

<h2>Problem</h2>

<p>而在mac上因為<strong>XCode</strong>的與<strong>升級Moutain Lion</strong>的關係，有可能會遇到一些小小的問題。
那就利用此篇做個記錄，以防下次遇到相同問題還要花時間找&#8230;。</p>

<h3>● 無法安裝Ruby 1.9.3</h3>

<p>因為在XCode 4.2之後，clang變成預設的compiler，XCode 4.2之後不再支援gcc。而Ruby 1.9.3 -p125之後的版本才會支援clang。<br/>
因此在安裝時有可能會跟你說：你無法安裝，請下載gcc compiler等等&#8230;</p>

<p>網路上有很多的解決辦法，因為我使用<a href="http://mxcl.github.com/homebrew/" title="Optional Title">Homebrew</a>，所以我參考
<a href="http://jfire.io/blog/2012/03/02/xcode-4-dot-3-homebrew-and-ruby/" title="Optional Title">Xcode 4.3, Homebrew, and Ruby</a>，順利解決問題。</p>

<h3>● 從Lion升級到Moutain Lion時出問題</h3>

<p>有一天我心血來潮把Lion升級成Moutain Lion時，發現rake無法preview&#8230;<br/>
顯示一些錯誤檔案訊息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site.py", line 565, in &lt;module&gt;
</span><span class='line'>  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site.py", line 547, in main
</span><span class='line'>  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site.py", line 278, in addusersitepackages
</span><span class='line'>  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site.py", line 253, in getusersitepackages
</span><span class='line'>  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site.py", line 243, in getuserbase
</span><span class='line'>  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sysconfig.py", line 523, in get_config_var
</span><span class='line'>  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sysconfig.py", line 419, in get_config_vars
</span><span class='line'>  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/sysconfig.py", line 298, in _init_posix
</span><span class='line'>IOError: invalid Python installation: unable to open /usr/include/python2.7/pyconfig.h (No such file or directory)</span></code></pre></td></tr></table></div></figure>


<p>然後又發現無法deploy，原來連Git也不見了&#8230;0rz</p>

<p>因此我參考了這篇<a href="http://www.sebastien-han.fr/blog/2012/07/26/broken-rake-after-update-to-mountain-lion/" title="Optional Title">post</a>，
並重新安裝Git，解決了我的問題。</p>

<h2>結論</h2>

<p>以後遇到同樣問題就不用怕了！</p>

<p>大家快來用Octopress吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singletons in Cocoa/Objective-C]]></title>
    <link href="http://ch8908.github.com/blog/2012/11/04/singletons-in-cocoa/"/>
    <updated>2012-11-04T19:28:00-08:00</updated>
    <id>http://ch8908.github.com/blog/2012/11/04/singletons-in-cocoa</id>
    <content type="html"><![CDATA[<h2>什麼是Singleton?</h2>

<p>在程式設計中，singleton是常常被使用的design pattern。<br/>
依照官方文件來解釋，它的意思是說：</p>

<blockquote><p>A singleton class returns the same instance no matter how many times an application requests it.</p></blockquote>

<!-- more -->


<p>如果你建立了一個singleton class，當你在呼叫此class的instance時，它永遠會回傳相同的instance。這樣的好處在於，你不會建立無用的instance，不浪費記憶體，也不會產生錯誤的資料，在application中永遠都使用同一筆資料。</p>

<h2>建立Singleton</h2>

<p>依照官方的建議<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaObjects/CocoaObjects.html#//apple_ref/doc/uid/TP40002974-CH4-SW32" title="Optional Title">Creating a Singleton Instance</a><br/>
嚴格定義一個singleton class，你必須要斷絕使用者任何可能產生錯誤的步驟。</p>

<h3>方法1:</h3>

<p>我們建立一個SingletonClass，實作它的.h與.m檔。</p>

<figure class='code'><figcaption><span>SingletonClass.h  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">SingletonClass</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SingletonClass</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SingletonClass.m  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">SingletonClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SingletonClass</span> <span class="o">*</span><span class="n">sharedMyInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sharedMyInstance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sharedMyInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">super</span> <span class="nl">allocWithZone:</span><span class="nb">nil</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedMyInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="n">sharedInstance</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此方法主要利用<code>static</code>的概念實作：一個變數被宣告成static，此變數不會隨著method結束而被銷毀。更進一步的說，static變數只會被宣告一次，而且永遠不會被銷毀。而當你把一個static變數宣告在method裡時，只有此method才可以呼叫此static變數。</p>

<p>照上面的例子來看，只有<code>sharedInstance</code>這個method可以呼叫<code>sharedMyInstance</code>。此外當第二次遇到<code>static SingletonClass *sharedMyInstance = nil;</code>時，程式會發現，已經有sharedMyInstance了，所以就不做任何動作(因為static變數無法被銷毀)。</p>

<p>那為什麼要override <code>allocWithZone:</code>??<br/>
Program defensively!!! <br/>
因為要防止聰明的programmer，透過<code>allocWithZone:</code>產生新的instance。</p>

<p>當使用者呼叫<code>allocWithZone</code>時，程式會改呼叫<code>sharedInstance</code>，判斷是否已經產生sharedMyInstance。這樣就達到singleton的效果！</p>

<p>但是，此種寫法有個致命的缺點，它<strong><em>不是thread safe</em></strong>，也就是說，當你的instance同時被許多的thread呼叫時，有可能會爆炸&#8230;</p>

<p><strong>如果你一定要用singleton，就用dispatch_once()吧！</strong></p>

<h3>方法2:</h3>

<figure class='code'><figcaption><span>SingletonClass.m  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">SingletonClass</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SingletonClass</span> <span class="o">*</span><span class="n">sharedMyInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">sharedMyInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">super</span> <span class="nl">allocWithZone:</span><span class="nb">nil</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedMyInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="n">sharedInstance</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件檔對dispatch_once的解釋：</p>

<blockquote><p>Executes a block object once and only once for the lifetime of an application.</p></blockquote>

<p>方法2是目前最簡單也最安全，也是常在WWDC影片中看到的方法。</p>

<h3>結論：</h3>

<p>如果真的要用singleton，那就使用第二種方法吧！</p>

<h2>參考資料：</h2>

<ol>
<li><a href="http://developer.apple.com/library/mac/#documentation/General/Conceptual/DevPedia-CocoaCore/Singleton.html" title="Optional Title">Singleton</a> - <em>Cocoa Core Competencies</em>.</li>
<li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaObjects/CocoaObjects.html#//apple_ref/doc/uid/TP40002974-CH4-SW32" title="Optional Title">Creating a Singleton Instance</a> - <em>Cocoa Fundamentals Guide</em>.</li>
<li><a href="http://eschatologist.net/blog/?p=178" title="Optional Title">Singletons in Cocoa/Objective-C</a></li>
<li><a href="http://cocoasamurai.blogspot.tw/2011/04/singletons-your-doing-them-wrong.html" title="Optional Title">Singletons: You&#8217;re doing them wrong</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Literals 介紹]]></title>
    <link href="http://ch8908.github.com/blog/2012/10/30/objective-c-literalsjie-shao/"/>
    <updated>2012-10-30T18:16:00-07:00</updated>
    <id>http://ch8908.github.com/blog/2012/10/30/objective-c-literalsjie-shao</id>
    <content type="html"><![CDATA[<p>Apple LLVM Compiler 4.0提供了新的object literal語法。
這篇文章會跟大家分享這新功能，讓在撰寫Objective-C時能夠有效率。
也讓Objective-C看起來更貼近開發人員啦！</p>

<!-- more -->


<p>在Objective-C中，最常被使用的object literal為</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">myString</span> <span class="o">=</span> <span class="s">@&quot;Thousand Squared&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上述的例子中，@&#8221;Thousand Squared&#8221;為一個object literal，用來代表一個<strong>NSString</strong> object。如果不使用object literal的話，程式碼會長的很不一樣。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">myString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithUTF8String:</span><span class="s">&quot;Thousand Squared&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明顯的可以知道，第一種寫法是比較好讀，也比較好寫的。</p>

<p>而新的Apple LLVM Compiler 4.0，增加了額外的object literal。
包含<strong>NSNumber</strong> object, <strong>NSArray</strong> object, <strong>NSDictionary</strong> object</p>

<h2>NSNumber Literals</h2>

<p>以<strong>NSNumber</strong>為例:</p>

<p>以下程式碼為傳統的Objective-C寫法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">boolYES</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">boolNO</span>  <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">charX</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithChar:</span><span class="sc">&#39;X&#39;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortySevenInt</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">47</span><span class="p">];</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortySevenUnsigned</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithUnsignedInt:</span><span class="mi">47</span><span class="n">U</span><span class="p">];</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortySevenLong</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithLong:</span><span class="mi">47L</span><span class="p">];</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">goldenRatioFloat</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="mf">1.61803F</span><span class="p">];</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">goldenRatioDouble</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithDouble:</span><span class="mf">1.61803</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>現在，我們可以用object literals改寫成：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">boolYES</span> <span class="o">=</span> <span class="err">@</span><span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">boolNO</span>  <span class="o">=</span> <span class="err">@</span><span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">charX</span> <span class="o">=</span> <span class="sc">@&#39;X&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortySevenInt</span> <span class="o">=</span> <span class="err">@</span><span class="mi">47</span><span class="p">;</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortySevenUnsigned</span> <span class="o">=</span> <span class="err">@</span><span class="mi">47</span><span class="n">U</span><span class="p">;</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortySevenLong</span> <span class="o">=</span> <span class="err">@</span><span class="mi">47L</span><span class="p">;</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">goldenRatioFloat</span> <span class="o">=</span> <span class="err">@</span><span class="mf">1.61803F</span><span class="p">;</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">goldenRatioDouble</span> <span class="o">=</span> <span class="err">@</span><span class="mf">1.61803</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是簡單多了呢！</p>

<h2>Objective-C Collection Literals</h2>

<p>Collection literal對objective-c來說真是不可思意的好用呀！新的LLVM Compiler有提供Array與Dictionary的collection listral，要注意的是，沒有包含sets。</p>

<h3>NSArray Literals</h3>

<p>傳統的語法建立<strong>NSArray</strong>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">instruments</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span> <span class="s">@&quot;Ocarina&quot;</span><span class="p">,</span> <span class="s">@&quot;Flute&quot;</span><span class="p">,</span> <span class="s">@&quot;Harp&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用新的object literal方法建立<strong>NSArray</strong>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">instruments</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span> <span class="s">@&quot;Ocarina&quot;</span><span class="p">,</span> <span class="s">@&quot;Flute&quot;</span><span class="p">,</span> <span class="s">@&quot;Harp&quot;</span> <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>很可惜的是，上述語法並不支援<strong>NSMutableArray</strong>，但是我們可以利用一些小撇步來建立<strong>NSMutableArray</strong>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">instrumentsMutable</span> <span class="o">=</span> <span class="p">[</span> <span class="err">@</span><span class="p">[</span> <span class="s">@&quot;Ocarina&quot;</span><span class="p">,</span> <span class="s">@&quot;Flute&quot;</span><span class="p">,</span> <span class="s">@&quot;Harp&quot;</span> <span class="p">]</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dictionary Literals</h3>

<p>傳統語法建立<strong>NSDictionary</strong> object：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">keys</span>   <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;Character&quot;</span><span class="p">,</span> <span class="s">@&quot;Weapon&quot;</span><span class="p">,</span> <span class="s">@&quot;Hitpoints&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">objects</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;Zelda&quot;</span><span class="p">,</span> <span class="s">@&quot;Sword&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">50</span><span class="p">],</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">stats</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjects:</span><span class="n">objects</span> <span class="nl">forKeys:</span><span class="n">keys</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者，可以更簡單一點：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">stats</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>                      <span class="s">@&quot;Zelda&quot;</span><span class="p">,</span> <span class="s">@&quot;Character&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s">@&quot;Sword&quot;</span><span class="p">,</span> <span class="s">@&quot;Weapon&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">50</span><span class="p">],</span> <span class="s">@&quot;Hitpoints&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了新的object literal之後，一切變得更簡單：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">stats</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span> <span class="s">@&quot;Character&quot;</span> <span class="o">:</span> <span class="s">@&quot;Zelda&quot;</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">@&quot;Weapon&quot;</span> <span class="o">:</span> <span class="s">@&quot;Sword&quot;</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">@&quot;Hitpoints&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">50</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Collection Subscripting</h2>

<p>除了利用object literal建立collection object之外，新的LLVM Compiler也提供存取collection object的方法─利用subscripts。</p>

<p>傳統的語法如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">instrument</span> <span class="o">=</span> <span class="p">[</span><span class="n">instruments</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="p">[</span><span class="n">stats</span> <span class="nl">objectForKey:</span><span class="s">@&quot;Character&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>現在，利用新的subscripts存取collection：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">instrument</span> <span class="o">=</span> <span class="n">instruments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">stats</span><span class="p">[</span><span class="s">@&quot;Character&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>除此之外，subscripting不只只有取出資料而已，如果你的collection為mutable的型態，你也可以用它來改變元素內容。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">instrumentsMutable</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">@&quot;Ocarina of Time&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">statsMutable</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDictionary:</span><span class="n">stats</span><span class="p">];</span>
</span><span class='line'><span class="n">statsMutable</span><span class="p">[</span><span class="s">@&quot;Weapon&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">@&quot;Hammer&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>這個改變讓objective-c變得更平易近人，操作上也更直觀。</p>

<h3>結論</h3>

<p>這些語法是完全<strong>向下相容</strong>的，經過compile後轉成2進位的編碼，是可以在舊的iOS環境執行的。<br/>
因此，別再留念舊方法啦!!!</p>

<h2>參考資料：</h2>

<ol>
<li><a href="http://mobile.tutsplus.com/tutorials/iphone/objective-c-literals/" title="Optional Title">Objective-C Literals</a> - <em>Mobile tuts+</em>.</li>
<li><a href="http://weblog.bignerdranch.com/398-objective-c-literals-part-1/" title="Optional Title">Objective-C Literals, Part 1</a> - <em>Big Nerd Ranch Weblog</em>.</li>
<li><a href="http://clang.llvm.org/docs/ObjectiveCLiterals.html" title="Optional Title">Objective-C Literals official documentation</a> - <em>LLVM Home</em>.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://ch8908.github.com/blog/2012/10/29/hello-world/"/>
    <updated>2012-10-29T16:27:00-07:00</updated>
    <id>http://ch8908.github.com/blog/2012/10/29/hello-world</id>
    <content type="html"><![CDATA[<p>Hello, this is my first post.
Just for test.
thank you</p>

<!-- more -->


<p>This is my content&#8230;&#8230;.</p>
]]></content>
  </entry>
  
</feed>
