<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Thousand Squared]]></title>
  <link href="http://ch8908.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://ch8908.github.com/"/>
  <updated>2013-02-21T09:19:40+08:00</updated>
  <id>http://ch8908.github.com/</id>
  <author>
    <name><![CDATA[黃千千]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS新手上路]]></title>
    <link href="http://ch8908.github.com/blog/2012/12/25/iosxin-shou-shang-lu/"/>
    <updated>2012-12-25T09:21:00+08:00</updated>
    <id>http://ch8908.github.com/blog/2012/12/25/iosxin-shou-shang-lu</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://site-macgasm.s3.amazonaws.com/wp-content/uploads/2012/03/ios-developer-deal.jpg"></p>

<p>從開始學習開發 iOS App 到現在差不多半年，發現 Cocoa Touch 及 Objective-C 真是一個有趣的組合，很多很酷的觀念可以學習。
跟大家來分享一些學習的參考資料及心得囉！</p>

<!-- more -->


<h2>開發環境</h2>

<p>首先，要開發iOS App，只能用 Mac OS，不像 Android 可以在 Win、Linux、Mac 上開發。如果沒有mac電腦，可以利用 <a href="http://www.souldevteam.net/blog/downloads/" title="Optional Title">Virtual Machine</a> 練習一下</p>

<p>開發用的IDE就使用XCode，因為許多官方的例子都是在XCode上作解說。等到之後熟悉了，可以改用AppCode，加速開發。</p>

<p>最後真的下定決心了，就準備買一台MacBook吧。</p>

<p>我買了Macbook Pro 13，因為常常要帶來帶去。另外我習慣用Programming的方法拉介面，因此不會有螢幕太小的問題XD</p>

<h2>第一隻 iOS App</h2>

<p>環境都架設好之後，就準備開始寫程式吧！</p>

<p>我第一隻iOS的程式是從官方網站的練習題 - <a href="https://developer.apple.com/library/ios/#referencelibrary/GettingStarted/RoadMapiOS/chapters/JumpRightIn.html" title="Optional Title">Your First iOS App</a><br/>
除此之外還有 <a href="https://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/SecondiOSAppTutorial/Introduction/Introduction.html" title="Optional Title">Your Second iOS App</a>
跟 <a href="https://developer.apple.com/library/ios/#documentation/General/Conceptual/iCloud101/Introduction/Introduction.html" title="Optional Title">Your Third iOS App</a>
，全部練習完後會信心大增XDD。</p>

<p>Apple的教學超用心的，教你XCode的開發環境，MVC的架構等等。每個步驟都有詳細解說，因此利用官方的範例當做第一隻App是最適合啦。</p>

<h2>網路教學</h2>

<p>網路上最有名的iOS教學就是 <a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/downloads-2011-fall" title="Optional Title">Stanford CS193P</a>
 史丹佛的iOS開放式教學課程，在iTunes上都可以免費下載。</p>

<p>除了有課程講義外，還有課程影片可以看唷，當然全都是英文的，不過iTunes可以開英文字幕。就不用擔心聽不懂啦。</p>

<p>Standord的白鬍子長得帥教的棒，實際的影片操作能快速熟悉XCode的開發環境，StoryBoard使用，並了解iOS開發流程。真的是很好的教學資源呀！</p>

<h2>教學書籍</h2>

<p>除了看影片之外，書是一定要有的，訪間許多iOS開發的中文書籍，其實都大同小異。但有一天我在網路上看到人家推薦一本iOS開發的書籍：</p>

<p><a href="http://www.books.com.tw/exep/prod/booksfile.php?item=F012646361" title="Optional Title">The Big Nerd Ranch Guide (3rd Edition)</a></p>

<p>大吃一斤!!!</p>

<p>這本書真是很適合初學者呀，內容圖文並茂，除了介紹怎麼開發之外，也介紹許多 Objective-C 與 Cocoa Touch 的特性，很多不知所以然的問題都有了答案，值得推薦給任何想學iOS的開發者們。</p>

<h2>相關網站</h2>

<p><a href="http://www.cocoacontrols.com/controls" title="Optional Title">Cocoa Controls</a>--
有很多UI範例可以參考，再難的UI也做的出來！</p>

<p><a href="http://mobile.tutsplus.com/" title="Optional Title">Mobile tuts</a>--
不定期會有 iOS 開發教學，有進階也有初階，有空可以逛逛挖寶。</p>

<p><a href="http://furnacedigital.blogspot.tw/" title="Optional Title">Furnace Digital</a>--
少數會看的中文教學網站，內容很多還不錯。</p>

<h2>學習心得</h2>

<p>Objective-C 與 Cocoa Touch 其實不好上手，因為他們與一般的習慣的程式語言有點不同。所以剛開始學習進度緩慢，常常在實作時，都照著範例打，卻不知道再幹嘛。</p>

<p>這點是正常的，請不用擔心，只要多練習，仔細看書本教學，自然就會開竅啦！遇到不熟的 API 怎麼辦？就直接到 stackoverflow 找吧，別浪費時間慢慢想，有時候只是因為你不知道這個 API 可以這樣用(因為 Cocoa Touch 本身就很特別)。</p>

<h2>小結</h2>

<p>因為行動裝置 App 的出現，讓工程師們多了一種管道可以改變世界。如果對開發實用的軟體有興趣，又喜歡iPhone、iPad，不妨考慮來學習開發iOS App吧！</p>

<p>ps:Objective-C 已經變成全世界最多人使用的程式語言囉</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming心得]]></title>
    <link href="http://ch8908.github.com/blog/2012/11/18/pair-programmingxin-de/"/>
    <updated>2012-11-18T21:43:00+08:00</updated>
    <id>http://ch8908.github.com/blog/2012/11/18/pair-programmingxin-de</id>
    <content type="html"><![CDATA[<p>在上個禮拜之前，寫程式對我來說，大部分都是一個人單打獨鬥的事情。</p>

<p>學校作業、碩士論文，一人一份，時間到了記得交出來。<br/>
工作時期，接案Case，一人一份，老闆覺得兩個人接同一個案子太浪費成本了！</p>

<p>以上的種種，讓寫程式都大部分為一個人做的事情，頂多就是問問資深人員一些架構問題等等...</p>

<p>最近到了新環境，採用了Pair Programming，真是令我既期待又怕受傷害阿阿阿阿～</p>

<!-- more -->


<h2>什麼是Pair Programming?</h2>

<p>Pair Programming來自Extreme Programming，它是Extreme Programming裡的其中一項作業。
(<a href="http://en.wikipedia.org/wiki/Extreme_programming" title="Optional Title">Extreme Programming</a>是一種軟體開發模式，我也才剛接觸所以不太熟)</p>

<p>簡單來說，就是兩個人坐在一起，配備<br/>
<strong>- 兩個螢幕</strong><br/>
<strong>- 兩個鍵盤</strong><br/>
<strong>- 兩個滑鼠</strong><br/>
<strong>- 一台主機</strong></p>

<p>沒錯！一台主機，就是兩個人coding同一份程式碼！</p>

<p>雖然以前有聽說過這種開發方式，但也只是聽說...</p>

<p>第一次參與Pair時，就是一直看一直看，一直看Senior以飛快的速度寫程式....<br/>
然後換我寫時，慢的跟新手一樣，還常常打錯字，鍵盤都握不好啦...0rz</p>

<p>沒想到在coding時，旁邊有人監督竟然這麼有壓力，怕變數名稱取的不好，怕打字速度太慢，怕誤會剛剛的演算法。讓我一開始pair時coding速度變很慢...。</p>

<h2>Pair的好處</h2>

<h4>1. 品質</h4>

<p>程式的品質真的好很多。</p>

<p>從最基本的變數名稱，邏輯判斷，演算法等等。一人寫程式，一人監督的概念，讓程式不會亂寫。</p>

<p>該抽出來的function就抽，該定義constant就定義，該寫的註解不會漏掉，不會有多餘的if else，可讀性提高許多，而且Bug真的變少了！
(很明顯感受到程式Compile執行後就正確無誤，真是太神奇啦！)</p>

<h4>2. 專心</h4>

<p>Pair互相監督討論，根本無法打混(除非兩個人一起打混...XD)。<br/>
這陣子下來發現，Pair時會超級認真的，討論很起勁還會忘記吃飯！<br/>
(因此Pair完也會有用腦過度的感覺...)</p>

<h4>3. 維護</h4>

<p>Pair雙方都對程式架構有相當程度的了解，因此不用擔心交接問題。<br/>
這對小公司來說應該算是最實用的地方了，不會產生爛攤子而沒人收拾。</p>

<p>對我而言，從pair上可以更快了解此專案內容。透過不斷的思考、討論、問與答，比起一個人慢慢的看code，效率要好上十幾倍呀！
而經由senior的在旁指導，讓我學習到更多軟體開發的技巧，也少走很多的冤枉路，真是太值得了。</p>

<h2>Pair的困擾</h2>

<p>Pair時也有幾個會困擾開發者的事情：</p>

<h4>1. IDE的選擇</h4>

<p>有人習慣用XCode，有人習慣用Eclips、Notepad++等，這些IDE的熱鍵有時都不同，當兩個人湊在一起時，就必須向某一方妥協，總不可能一直切換IDE寫吧。
為了有共識，我們公司統一Pair開發用IDE，也統一了熱鍵，方便開發。</p>

<h4>2. 查資料時效率不好</h4>

<p>寫到一半卡住，要google時，會發現兩人用一台電腦真是不好查資料...因為每個人的閱讀習慣不同，
因此常常會一個人在查，另一個人就在發呆...。為了克服這個問題，我們還是會另外放一台筆電在旁邊，做為查資料時使用。</p>

<h4>3. 作息要一致</h4>

<p>若Pair的作息不同，Pair的時間就會變少了，我想這也是Pair的宿命吧。</p>

<h4>4. 學習時間變少</h4>

<p>我們公司是full time pair，這有一個意想不到的缺點，就是沒有自己的時間呀。<br/>
上班就是pair到下班，想要學新技術，就必須自己找時間學習。
不知不覺壓力就變大了哈哈哈<br/>
(不過這或許是好事吧XD)</p>

<h2>總結</h2>

<p>我覺得pair programming真的還蠻適合用在規模不大專案的開發上。
不僅程式品質變好，開發速度其實也是變快的(Debug時間大大變少...XD)。</p>

<p>可惜pair programming在台灣老闆耳中聽起來就很像是一種增加成本的開發方式...0rz。</p>

<p>如果有時間的話，就來試試Pair Programming吧。</p>

<h2>參考資料：</h2>

<ol>
<li><a href="http://en.wikipedia.org/wiki/Pair_programming" title="Optional Title">Pair Programming</a> - <em>Wiki Pair Programming</em>.</li>
<li><a href="http://en.wikipedia.org/wiki/Extreme_programming" title="Optional Title">Extreme Programming</a> - <em>Wiki Extreme Programming</em>.</li>
</ol>

]]></content>
  </entry>
  
</feed>
