<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Thousand Squared]]></title>
  <link href="http://ch8908.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://ch8908.github.com/"/>
  <updated>2013-02-21T09:19:40+08:00</updated>
  <id>http://ch8908.github.com/</id>
  <author>
    <name><![CDATA[黃千千]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PasscodeLock]]></title>
    <link href="http://ch8908.github.com/blog/2013/01/27/passcodelock/"/>
    <updated>2013-01-27T20:00:00+08:00</updated>
    <id>http://ch8908.github.com/blog/2013/01/27/passcodelock</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://modmyi.com/attachments/forums/iphone-2g-3g-3gs-ipod-touch-1g-2g-3g-new-skins-themes-launches/420999d1264371765-release-rainbow-lockscreen-passcode-lock-lockbackground12.jpg"></p>

<p>前陣子實作了 PasscodeLock ，感覺還蠻有趣的，跟大家分享如何實作。</p>

<p>一個好的 PasscodeLock 要能夠蓋住全部的UI，像是 UIAlertView, UIActionSheet，或者是 UIImagePickerController</p>

<p>但利用一般的 UIViewController 是做不到的，因為 UIAlertView 的顯示層級最高。因此要利用另外一種方法來實作PasscodeLock─<strong>UIWindow</strong></p>

<!-- more -->


<h2>實作UIWindow</h2>

<p><a href="https://github.com/ch8908/Thousnad2/tree/master/PasscodeLock" title="Optional Title">View source on Github</a></p>

<p>PasscodeLock的關鍵就是：要建立另一個UIWindow。</p>

<p>為什麼呢？</p>

<p>因為 UIAlertView、UIActionSheet 等這些 View 其實都會建立自己的 UIWindow，也因為這樣，這些 UIAlertView 才可以顯示在最上層。
所以當你看到 UIAlertView 時，它跟原本的 app 畫面已經在不同層次(也就是不同 UIWindow)了。所以無論你在原本的 viewController 怎麼寫，都沒有辦法覆蓋在 UIAlertView 上。</p>

<p>要覆蓋住 UIAlertView，只能夠建立一個 Level 比他高的 UIWindow。<br/>
以下是建立的程式碼：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="p">[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">].</span><span class="n">bounds</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//set window level</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">windowLevel</span> <span class="o">=</span> <span class="n">UIWindowLevelAlert</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">passcodeLockViewController</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>重點在設定 window level</p>

<p>把這些值印出來就可以知道，UIWindowLevelAlert 是最大的：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2013-01-27 22:41:04.744 PasscodeLock[28036:c07] >>>>>>>>>>UIWindowLevelAlert 2000.000000
</span><span class='line'>2013-01-27 22:41:04.745 PasscodeLock[28036:c07] >>>>>>>>>>UIWindowLevelStatusBar 1000.000000
</span><span class='line'>2013-01-27 22:41:04.745 PasscodeLock[28036:c07] >>>>>>>>>>UIWindowLevelNormal 0.000000</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>因此我們只要設定一個比 UIWindowLevelAlert 大的值就可以了，但有沒有副作用我就不知道了XD</p>

<p>另外就是顯示的時候啦，有兩個部分：</p>

<p>第一個部分是在：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">applicationDidEnterBackground:</span><span class="p">(</span><span class="n">UIApplication</span><span class="o">*</span><span class="p">)</span> <span class="n">application</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">passcodeLockWindow</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>為什麼要寫在這裡？因為當一進入背景的時候，就要先建立好 PasscodeLock，根據
<a href="http://developer.apple.com/library/ios/#DOCUMENTATION/iPhone/Conceptual/iPhoneOSProgrammingGuide/ManagingYourApplicationsFlow/ManagingYourApplicationsFlow.html" title="Optional Title">Document</a>
 表示</p>

<blockquote><p>When an app transitions to the background, the system takes a snapshot of the app’s main window, which it then presents briefly when transitioning your app back to the foreground.</p></blockquote>

<p>上面說的是 App 進入背景時，系統會先截圖。等到 app 再次開啟時，就可以秀出這張截圖作為Loading時使用。</p>

<p>為了避免看到未上鎖的畫面，在 app 進入背景時就先建立好 PasscodeLock 並顯示，等到下次開啟 app 時，就可以直接看到 PasscodeLock 的畫面。</p>

<p>第二個部分在：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">launchOptions</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">passcodeLockWindow</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>初次開啟 app 時，就要啟動 PasscodeLock。</p>

<p>有了這兩個地方就可以控制 PasscodeLock 的出現與消失。</p>

<h2>實作Keyboard</h2>

<p>另一個部分就是實作 Keyboard ，為什麼要自己實作 Keyboard？</p>

<p>因為有特例要處理，假設情境如下：</p>

<blockquote><p>當你開啟密碼鎖並且在更改密碼時，突然有人打電話近來。<br/>
等你講完電話後，開啟app，此時要輸入密碼解鎖，輸入完後會跳到更改密碼的畫面。</p></blockquote>

<p>如果此時都是用原生的 Keyboard，在 iOS4 與 iOS5+ 會有不一樣的情況發生，因為 Keyboard 要在不同 UIWindow 出現。而原生的 Keyboard 是 Singlton的東西，處理起來會有一些問題。<br/>
因此在整體效率及維護的考量之下，使用假鍵盤是最佳解(我自己覺得XD)！</p>

<h2>How to use this project</h2>

<h4>1. 建立PasscodeLock畫面</h4>

<p>因此當你需要設定密碼、更改密碼、驗證密碼時需要繼承：</p>

<p><strong>AbstractPasscodeLockViewController</strong>，其中有1個重要的 method 需要實作</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">onFilled:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>當填滿密碼時，就會呼叫此 method，需要在此 method 判斷密碼是否正確。</p>

<h4>2. 呼叫 PasscodeLock Window</h4>

<p>class <strong>PasscodeLockWindow</strong> 用來建立、顯示與隱藏 PasscodeLock window。</p>

<p>要建立此 instance 來操作 PasscodeLock。</p>

<h2>小結</h2>

<p>這是最基本的PasscodeLock，還可以加上動畫、特效讓他看起來更炫。</p>

<p>那如果忘記密碼呢？</p>

<p>很抱歉，只能重新安裝App啦XDD，不然你也可以寫一個暗鎖解開他(譬如案10次0)。</p>

<p><a href="https://github.com/ch8908/Thousnad2/tree/master/PasscodeLock" title="Optional Title">View source on Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS新手上路]]></title>
    <link href="http://ch8908.github.com/blog/2012/12/25/iosxin-shou-shang-lu/"/>
    <updated>2012-12-25T09:21:00+08:00</updated>
    <id>http://ch8908.github.com/blog/2012/12/25/iosxin-shou-shang-lu</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://site-macgasm.s3.amazonaws.com/wp-content/uploads/2012/03/ios-developer-deal.jpg"></p>

<p>從開始學習開發 iOS App 到現在差不多半年，發現 Cocoa Touch 及 Objective-C 真是一個有趣的組合，很多很酷的觀念可以學習。
跟大家來分享一些學習的參考資料及心得囉！</p>

<!-- more -->


<h2>開發環境</h2>

<p>首先，要開發iOS App，只能用 Mac OS，不像 Android 可以在 Win、Linux、Mac 上開發。如果沒有mac電腦，可以利用 <a href="http://www.souldevteam.net/blog/downloads/" title="Optional Title">Virtual Machine</a> 練習一下</p>

<p>開發用的IDE就使用XCode，因為許多官方的例子都是在XCode上作解說。等到之後熟悉了，可以改用AppCode，加速開發。</p>

<p>最後真的下定決心了，就準備買一台MacBook吧。</p>

<p>我買了Macbook Pro 13，因為常常要帶來帶去。另外我習慣用Programming的方法拉介面，因此不會有螢幕太小的問題XD</p>

<h2>第一隻 iOS App</h2>

<p>環境都架設好之後，就準備開始寫程式吧！</p>

<p>我第一隻iOS的程式是從官方網站的練習題 - <a href="https://developer.apple.com/library/ios/#referencelibrary/GettingStarted/RoadMapiOS/chapters/JumpRightIn.html" title="Optional Title">Your First iOS App</a><br/>
除此之外還有 <a href="https://developer.apple.com/library/ios/#documentation/iPhone/Conceptual/SecondiOSAppTutorial/Introduction/Introduction.html" title="Optional Title">Your Second iOS App</a>
跟 <a href="https://developer.apple.com/library/ios/#documentation/General/Conceptual/iCloud101/Introduction/Introduction.html" title="Optional Title">Your Third iOS App</a>
，全部練習完後會信心大增XDD。</p>

<p>Apple的教學超用心的，教你XCode的開發環境，MVC的架構等等。每個步驟都有詳細解說，因此利用官方的範例當做第一隻App是最適合啦。</p>

<h2>網路教學</h2>

<p>網路上最有名的iOS教學就是 <a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/downloads-2011-fall" title="Optional Title">Stanford CS193P</a>
 史丹佛的iOS開放式教學課程，在iTunes上都可以免費下載。</p>

<p>除了有課程講義外，還有課程影片可以看唷，當然全都是英文的，不過iTunes可以開英文字幕。就不用擔心聽不懂啦。</p>

<p>Standord的白鬍子長得帥教的棒，實際的影片操作能快速熟悉XCode的開發環境，StoryBoard使用，並了解iOS開發流程。真的是很好的教學資源呀！</p>

<h2>教學書籍</h2>

<p>除了看影片之外，書是一定要有的，訪間許多iOS開發的中文書籍，其實都大同小異。但有一天我在網路上看到人家推薦一本iOS開發的書籍：</p>

<p><a href="http://www.books.com.tw/exep/prod/booksfile.php?item=F012646361" title="Optional Title">The Big Nerd Ranch Guide (3rd Edition)</a></p>

<p>大吃一斤!!!</p>

<p>這本書真是很適合初學者呀，內容圖文並茂，除了介紹怎麼開發之外，也介紹許多 Objective-C 與 Cocoa Touch 的特性，很多不知所以然的問題都有了答案，值得推薦給任何想學iOS的開發者們。</p>

<h2>相關網站</h2>

<p><a href="http://www.cocoacontrols.com/controls" title="Optional Title">Cocoa Controls</a>--
有很多UI範例可以參考，再難的UI也做的出來！</p>

<p><a href="http://mobile.tutsplus.com/" title="Optional Title">Mobile tuts</a>--
不定期會有 iOS 開發教學，有進階也有初階，有空可以逛逛挖寶。</p>

<p><a href="http://furnacedigital.blogspot.tw/" title="Optional Title">Furnace Digital</a>--
少數會看的中文教學網站，內容很多還不錯。</p>

<h2>學習心得</h2>

<p>Objective-C 與 Cocoa Touch 其實不好上手，因為他們與一般的習慣的程式語言有點不同。所以剛開始學習進度緩慢，常常在實作時，都照著範例打，卻不知道再幹嘛。</p>

<p>這點是正常的，請不用擔心，只要多練習，仔細看書本教學，自然就會開竅啦！遇到不熟的 API 怎麼辦？就直接到 stackoverflow 找吧，別浪費時間慢慢想，有時候只是因為你不知道這個 API 可以這樣用(因為 Cocoa Touch 本身就很特別)。</p>

<h2>小結</h2>

<p>因為行動裝置 App 的出現，讓工程師們多了一種管道可以改變世界。如果對開發實用的軟體有興趣，又喜歡iPhone、iPad，不妨考慮來學習開發iOS App吧！</p>

<p>ps:Objective-C 已經變成全世界最多人使用的程式語言囉</p>
]]></content>
  </entry>
  
</feed>
